/*!
 * \file
 * This file is automatically generated, DO NOT modify. It defines the system
 * catalog table @TABLENAME@, which @TABLEDESC@.
 *
 * This file does not have a header guard intentionally. This must be included
 * indirectly from catalog/systables.h.
 */

namespace taco {

/*!
 * SysTable_@TABLENAME@ is an in-memory cached record in the system catalog
 * SysTable_@TABLENAME@.
 */
class SysTable_@TABLENAME@ {
public:
@@FIELD@@
    /*!
     * Returns @COLDESC@.
     */
    constexpr @CTYPE_CREF@
    @COLNAME@() const {
        return m_@COLNAME@;
    }
@@


private:
    SysTable_@TABLENAME@(
@@FIELD@@        @CTYPE@ @COLNAME@@COMMA_OPT@
@@
    ):
@@FIELD@@    m_@COLNAME@(@MOVE_IF_TYPE_NONTRIVIAL@(@COLNAME@))@COMMA_OPT@
@@{}

@@FIELD@@    @CTYPE@ m_@COLNAME@;
@@
    /*!
     * Returns all the fields as a datum vector. Note that the entry itself
     * must be kept alive when the datum vector is accessed, as we may return
     * references without copying the underlying data. This function is private
     * and only accessible to the catalog cache implementation.
     */
    std::vector<Datum> GetDatumVector() const;

    /*!
     * Creates a new SysTable_@TABLENAME@ with a data vector read from some
     * record payload. This function is private and only accessible to the
     * catalog cache implementation.
     */
    static SysTable_@TABLENAME@ *Create(const std::vector<Datum>&);

    SysTable_@TABLENAME@(const SysTable_@TABLENAME@&) = default;
    SysTable_@TABLENAME@& operator=(const SysTable_@TABLENAME@&) = default;

    friend class BootstrapCatCache;
    friend class CatCacheInternalAccess;

public:
    // The following are constants of the field ids in the systables.
    // These are mostly used by the catalog cache impl. to prevent accidental
    // misspelling of column names.

@@FIELD@@    inline static constexpr FieldId
    @COLNAME@_colid() {
        return @FIELD_ID@;
    }

@@
};

}        // namespace taco



