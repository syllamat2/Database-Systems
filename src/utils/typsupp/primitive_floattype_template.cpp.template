#ifndef UTILS_TYPSUPP_@SQLTYPE@_H
#define UTILS_TYPSUPP_@SQLTYPE@_H

// @COMMENT@ This template file needs to be processed with sed.
// @COMMENT@ Any line with @COMMENT will be stripped
// @COMMENT@ The following variables are replaced:
// @COMMENT@ @CTYPE@ the c type name
// @COMMENT@ @Datum_Getter@ the GetXXX() function in Datum
// @COMMENT@ @SQLTYPE@ the sql type name
// @COMMENT@ @ABSL::ATO@ the absl::SimpleAtoX function or ours for 1/2-byte integers
// @COMMENT@ @PRI@ unused
// @COMMENT@ @OID@: The first a few digits of the OID

#include "tdb.h"

#include <cinttypes>

#include <absl/strings/str_cat.h>

#include "utils/builtin_funcs.h"
#include "utils/numbers.h"

namespace taco {

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_in, @OID@)
BUILTIN_ARGTYPE(__STRING)
{
    if (FMGR_ARG(0).isnull()) {
        return Datum::FromNull();
    }

    absl::string_view &&str = FMGR_ARG(0).GetVarlenAsStringView();
    @CTYPE@ val;
    if (!@ABSL::ATO@(str, &val)) {
        LOG(kError, "cannot parse \"%s\" as a @SQLTYPE@", str);
    }
    return Datum::From(val);
}

BUILTIN_RETTYPE(__STRING)
BUILTIN_FUNC(@SQLTYPE@_out, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@)
{
    if (FMGR_ARG(0).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ val = FMGR_ARG(0).@Datum_Getter@();
    std::string s = absl::StrCat(val);
    auto buffer = unique_malloc(s.size());
    memcpy((char*) buffer.get(), s.data(), s.size());
    return Datum::FromVarlenBytes(std::move(buffer), s.size());
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_add, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@)
BUILTIN_OPR(ADD)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = arg0 + arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_sub, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@)
BUILTIN_OPR(SUB)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = arg0 - arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_mul, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@)
BUILTIN_OPR(MUL)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = arg0 * arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_div, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@)
BUILTIN_OPR(DIV)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = arg0 / arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_neg, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@)
BUILTIN_OPR(NEG)
{
    if (FMGR_ARG(0).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ res = -arg0 ;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_eq, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(EQ)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 == arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_ne, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(NE)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 != arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_lt, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(LT)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 < arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_le, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(LE)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 <= arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_gt, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(GT)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 > arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_ge, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(GE)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 >= arg1;
    return Datum::From(res);
}


}   // namespace taco

#endif      // UTILS_TYPSUPP_@SQLTYPE@_H
