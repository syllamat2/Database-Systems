#ifndef UTILS_TYPSUPP_@SQLTYPE@_H
#define UTILS_TYPSUPP_@SQLTYPE@_H

// @COMMENT@ This template file needs to be processed with sed.
// @COMMENT@ Any line with @COMMENT will be stripped
// @COMMENT@ The following variables are replaced:
// @COMMENT@ @CTYPE@ the c type name
// @COMMENT@ @Datum_Getter@ the GetXXX() function in Datum
// @COMMENT@ @SQLTYPE@ the sql type name
// @COMMENT@ @ABSL::ATO@ the absl::SimpleAtoX function or ours for 1/2-byte integers
// @COMMENT@ @PRI@ the macro for the printf type specifier
// @COMMENT@ @OID@: The next oid

#include "tdb.h"

#include <cinttypes>

#include <absl/strings/numbers.h>

#include "utils/builtin_funcs.h"
#include "utils/numbers.h"

namespace taco {

namespace {

// The longest 64-bit integer is 20 digits long. Adding a possible sign and
// the space for '\0' gives us 22.
constexpr const size_t STRING_OUTPUT_BUFLEN = 22;
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_in, @OID@)
BUILTIN_ARGTYPE(__STRING)
{
    if (FMGR_ARG(0).isnull()) {
        return Datum::FromNull();
    }

    absl::string_view &&str = FMGR_ARG(0).GetVarlenAsStringView();
    @CTYPE@ val;
    if (!@ABSL::ATO@(str, &val)) {
        LOG(kError, "cannot parse \"%s\" as a @SQLTYPE@", str);
    }
    return Datum::From(val);
}

BUILTIN_RETTYPE(__STRING)
BUILTIN_FUNC(@SQLTYPE@_out, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@)
{
    if (FMGR_ARG(0).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ val = FMGR_ARG(0).@Datum_Getter@();
    auto buffer = unique_malloc(STRING_OUTPUT_BUFLEN);
    absl::SNPrintF((char*) buffer.get(), STRING_OUTPUT_BUFLEN, "%" @PRI@, val);
    return Datum::FromVarlenBytes(std::move(buffer),
                                  strlen((char*) buffer.get()));
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_add, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(ADD)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = arg0 + arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_sub, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(SUB)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = arg0 - arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_mul, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(MUL)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = arg0 * arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_div, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(DIV)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    if (arg1 == 0) {
        LOG(kError, "division by zero");
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ res = arg0 / arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_mod, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(MOD)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    if (arg1 == 0) {
        LOG(kError, "division by zero");
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ res = arg0 % arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_neg, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@)
BUILTIN_OPR(NEG)
{
    if (FMGR_ARG(0).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ res = -arg0 ;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_eq, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(EQ)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 == arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_ne, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(NE)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 != arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_lt, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(LT)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 < arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_le, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(LE)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 <= arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_gt, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(GT)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 > arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(BOOL)
BUILTIN_FUNC(@SQLTYPE@_ge, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(GE)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    bool res = arg0 >= arg1;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_not, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@)
BUILTIN_OPR(BITNOT)
{
    if (FMGR_ARG(0).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ res = ~arg0 ;
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_and, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(BITAND)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = (arg0 & arg1);
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_or, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(BITOR)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = (arg0 | arg1);
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_xor, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, @SQLTYPE@)
BUILTIN_OPR(BITXOR)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = (arg0 ^ arg1);
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_lsh, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, UINT1)
BUILTIN_OPR(LSH)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).@Datum_Getter@();
    @CTYPE@ res = (arg0 << arg1);
    return Datum::From(res);
}

BUILTIN_RETTYPE(@SQLTYPE@)
BUILTIN_FUNC(@SQLTYPE@_rsh, @OID@)
BUILTIN_ARGTYPE(@SQLTYPE@, UINT1)
BUILTIN_OPR(RSH)
{
    if (FMGR_ARG(0).isnull() || FMGR_ARG(1).isnull()) {
        return Datum::FromNull();
    }

    @CTYPE@ arg0 = FMGR_ARG(0).@Datum_Getter@();
    @CTYPE@ arg1 = FMGR_ARG(1).GetUInt8();
    @CTYPE@ res = (arg0 >> arg1);
    return Datum::From(res);
}

}   // namespace taco

#endif      // UTILS_TYPSUPP_@SQLTYPE@_H
